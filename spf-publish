#!/bin/sh
case $ZSH_VERSION in '') :;; *) alias -g '${1+"$@"}="$@"';; esac &&
CDPATH= && unset CDPATH

. ./prjlib.sh
. ./sptools.sh
. ./spftools.sh

case $? in 0) :;; *) (exit "$?");; esac &&
{ test "$#" != 0 ||
  prj_fail 'usage: spf-publish /package/host/example.org/foreign/foo-1.2.3[+spf4] [...]'
} &&
prj_set prj_program spf-publish &&
sp_validate_root &&

spf_make_depends_file_() {
  prj_unset spf_url_ spf_dist_dir spf_tarbase spf_depends_file_ spf_depend_tmpline_ &&
  spf_url_=$1 &&
  spf_dist_dir_=$SP_ROOT/package/host/${spf_host?}/dist/ &&
  spf_tar_base=`prj_basename "${spf_url_?}"` &&
  spf_depends_file_=${spf_dist_dir_?}/$(uname -m)/${spf_tar_base?}.depends.txt &&
  rm -f ${spf_depends_file_} &&
  prj_u2 prj_getstatus is_static \
    spf_is_static "${spf_url_?}" &&
    if test 1 = "${is_static}"; then
      for file in ${spf_url_}/conf-compile/depend_* ; do
        if test -f $file ; then
          read -r spf_depend_tmpline_<$file
          echo ${spf_depend_tmpline_?} >> ${spf_depends_file_?}
        fi
      done
    fi
} &&
spf_make_packages_() {
  prj_unset spf_url_ spf_dist_dir spf_tarbase spf_depend_tmpline_ &&
  spf_url_=$1 &&
  spf_dist_dir_=$SP_ROOT/package/host/${spf_host?}/dist/ &&
  spf_tar_base=`prj_basename "${spf_url_?}"` &&
  # make the package tarball
  prj_u2 prj_getstatus is_static \
    spf_is_static "${spf_url_?}" &&
  spf_make_tarball_ ${spf_url_?} &&
  spf_make_depends_file_ ${spf_url_?} &&
  # if it's a dynamic package grab dependencies
  # Not sure if we need to do this recursively here. 
  if test 1 = "${is_static}"; then
    for file in ${spf_url_}/conf-compile/depend_* ; do 
      if test -f $file ; then
        read -r spf_depend_tmpline_<$file
        spf_make_tarball_ ${spf_depend_tmpline_}
        spf_make_depends_file_ ${spf_depend_tmpline_}
      fi
    done
  fi
} &&
spf_make_tarball_() {
  # spf_url=/package/host/test.com/foreign/wget-1.16.3+spf+1
  # spf_base=wget - is set from the spf_parse function
  # spf_path_data=wget-data - is set from the spf_parse function
  prj_unset spf_url_ spf_dist_dir spf_tarbase current_arch spf_foreign_dir_ &&
  spf_url_=$1 &&
  echo "Making tarball for ${spf_url_}" &&
  spf_tar_base=`prj_basename "${spf_url_?}"` &&
  current_arch=$(uname -m) &&
  spf_dist_dir_=$SP_ROOT/package/host/${spf_host?}/dist/ &&
  if prj_exists ${spf_dist_dir_?}/${current_arch?}/${spf_tar_base?}.tar.xz; then
    echo "Package ${spf_dist_dir_?}/${current_arch?}/${spf_tar_base?}.tar.xz already exists"
  else
    prj_mkdir_p ${spf_dist_dir_?}/${current_arch?} &&
    prj_mkdir_p ${spf_dist_dir_?}/tmp &&
    prj_u2 prj_getstatus is_static \
      spf_is_static "${spf_url_?}" &&
    { prj_is_set spf_tmpdir_ ||
      prj_tmpdir spf_tmpdir_ "${spf_dist_dir_?}/tmp"; } &&
    # copy the package file to tmpdir
    cp -Rp ${spf_url_?} ${spf_tmpdir_?} &&
    # copy the data dir and rename it to the correct tag
    if test -h ${spf_foreign_dir_}/${spf_base?}-data ; then
      spf_foreign_dir_=$(prj_dirname $spf_url_) &&
      spf_data_dir_=$(readlink ${spf_foreign_dir_}/${spf_base?}-data) &&
      cp -Rp ${spf_foreign_dir_?}/${spf_data_dir_?} ${spf_tmpdir_?}/${spf_tar_base}-data 
    fi &&
    cd ${spf_tmpdir_?} &&
    # run a strip --strip-unneeded on the binaries
    for file in */command/* ; do 
      if prj_exists $file; then
        strip --strip-unneeded $file 2>&1 > /dev/null || :
      fi
    done &&
    tar Jcpf ${spf_tar_base?}.tar.xz ./* &&
    mv ${spf_tmpdir_?}/${spf_tar_base?}.tar.xz ${spf_dist_dir_?}/${current_arch?} &&
    rm -rf ${spf_tmpdir_?}
  fi

} &&

prj_unset spf_url_ spf_tmp_ spf_tardir_ spf_tmpdir_ &&
for sp_path in ${1+"$@"}; do
  { sp_path=`prj_sedarg1 's%/*$%%' "${sp_path?}"` &&
    case ${sp_path?} in
      /*) :;;
      *) prj_fail "package path must be absolute: ${sp_path?}";;
    esac &&
    spf_parse "${sp_path?}" &&
    if test '' = "${spf_version}"
      then prj_fail "package path must include a version: ${sp_path?}"
      else :
    fi &&
    if test -d "${sp_path?}" 
      then :
      else prj_fail "package path must be a directory: ${sp_path?}"
    fi &&
    spf_load_info &&
    eval "set x ${sp_path?}" && shift &&
#    eval "set x ${spf_url_home_?}" && shift &&
    while test "$#" != 0; do
      { eval "spf_make_packages_ $1" &&
        shift
      } || exit "$?"
    done
  } || exit "$?"
done &&
if prj_is_set spf_tmpdir_
  then rm -rf "${spf_tmpdir_?}"
  else :
fi
